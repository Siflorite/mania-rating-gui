import { ComboBox, VerticalBox, ScrollView, HorizontalBox, Button, Switch, LineEdit } from "std-widgets.slint";
import { ScoreTile } from "score_tiles.slint";
import { HelpWindow } from "help_window.slint";

export struct ScoreTileData {
    image: image,
    index: int,
}

export component MainWindow inherits Window {
    // Original card: 1200 * 350 -> 600 * 175 (0.5x)
    width: 1850px;
    height: 800px; 
    title: "Mania Rating Viewer";
    icon: @image-url("../svg/icon.svg");
    default-font-family: "Source Han Sans SC";

    in-out property <[ScoreTileData]> score-tiles;
    in-out property <[ScoreTileData]> removed-tiles: [];
    in-out property <[ScoreTileData]> realtime-tiles: [];
    in-out property <[string]> player-names: ["[Recent 30]"];
    in-out property <string> current-player-name: "[Recent 30]";
    in-out property <string> text-content: "";
    in-out property <string> test-content: "This is a test message.";
    in-out property <string> osu-dir: "";

    in-out property <bool> export-enable: true;
    in-out property <bool> is-real-time: false;

    callback selection_changed(string);
    callback reset-tiles();
    callback export();
    callback added(int);
    callback removed(int);
    callback copied(image);
    callback toggle-realtime(bool);
    callback show-help-window();
    callback refresh();
    callback select-osu-dir();

    HorizontalLayout {
        x: 10px;
        y: 10px;
        spacing: 10px;
        ComboBox {
            width: 300px;
            height: 40px;
            current-value: "[Recent 30]";
            model <=> player-names;
            enabled: !root.is-real-time;
            selected(current-value) => {
                if current-value != root.current-player-name {
                    root.export-enable = false;
                    root.selection_changed(current-value);
                    root.current-player-name = current-value;
                }
            }
        }

        Button {
            width: 100px;
            height: 40px;
            text: "重置";
            enabled: !root.is-real-time;
            clicked => {
                root.export-enable = false;
                reset-tiles();
            }
        }

        Button {
            width: 100px;
            height: 40px;
            text: "导出";
            enabled: root.export-enable && !root.is-real-time;
            clicked => {
                root.export-enable = false;
                export();
            }
        }

        Switch {
            width: 160px;
            height: 40px;
            checked <=> root.is-real-time;
            text: "实时模式 (测试版)";
            toggled => {
                toggle-realtime(root.is-real-time);
            }
        }

        Button {
            width: 100px;
            height: 40px;
            text: "使用说明";
            clicked => {
                show-help-window();
            }
        }

        Text {
            y: 8px;
            width: 630px;
            height: 40px;
            font-size: 18px;
            text: root.text-content;
        }

        LineEdit {
            read-only: true;
            width: 250px;
            height: 40px;
            text: root.osu-dir;
        }

        Button {
            width: 120px;
            height: 40px;
            text: "选择osu!文件夹";
            clicked => {
                select-osu-dir();
            }
        }
        
    }

    ScrollView {
        visible: !root.is-real-time;
        y: 60px;
        width: 1840px;
        height: 740px;
        viewport-width: 1820px; // 3 * 600 + 2 * 10 padding
        viewport-height: (root.removed-tiles.length > 0) ? Math.ceil(score-tiles.length / 3) * 185px + 50px + Math.ceil(removed-tiles.length / 3) * 185px : Math.ceil(score-tiles.length / 3) * 185px; // 10 * 175 + 9 * 10 padding + ComboBox
    
        for tile[i] in score-tiles : ScoreTile {
            id: tile.index;
            source: root.score-tiles[i].image;
            available: true;
            x: Math.mod(i, 3) * 610px; 
            y: Math.floor(i / 3) * 185px;
            removed(idx) => {
                root.export-enable = false;
                root.removed(idx);
            }
            copied(image) => {
                root.copied(image);
                root.text-content = "#\{self.id+1}卡片已复制到剪贴板";
            }
        }
    
        property <length> prev-height: Math.ceil(score-tiles.length / 3) * 185px;
        if root.removed-tiles.length > 0 : Text {
            x: 10px;
            y: prev-height;
            text: "Removed";
            font-size: 28px;
        }
    
        for tile[i] in removed-tiles : ScoreTile {
            id: tile.index;
            source: root.removed-tiles[i].image;
            available: false;
            x: Math.mod(i, 3) * 610px; 
            y: prev-height + 50px + Math.floor(i / 3) * 185px;
            added(idx) => {
                root.export-enable = false;
                root.added(idx);
            }
            copied(image) => {
                root.copied(image);
                root.text-content = "#\{self.id+1}卡片已复制到剪贴板";
            }
        }
    }

    VerticalLayout {
        y: 60px;
        spacing: 10px;
        visible: root.is-real-time;
        HorizontalLayout {
            x: 10px;
            spacing: 10px;
            Text {
                y: 10px;
                text: root.test-content;
                font-size: 16px;
                width: 300px;
                height: 40px;
            }
            Button {
                width: 100px;
                height: 40px;
                text: "清空";
                clicked => {
                    root.realtime-tiles = [];
                }
            }
            Button {
                width: 100px;
                height: 40px;
                text: "刷新";
                clicked => {
                    root.refresh();
                }
            }
        }
        ScrollView {
            x: 5px;
            width: 1840px;
            height: 690px;
            viewport-width: 1820px; // 3 * 600 + 2 * 10 padding
            viewport-height: Math.ceil(realtime-tiles.length / 3.0) * 185px;
            for tile[i] in realtime-tiles : ScoreTile {
                id: tile.index;
                source: root.realtime-tiles[i].image;
                available: true;
                x: Math.mod(i, 3) * 610px; 
                y: Math.floor(i / 3) * 185px;
                removed(idx) => {
                    
                }
                copied(image) => {
                    root.copied(image);
                    root.text-content = "#\{self.id+1}卡片已复制到剪贴板";
                }
            }
        }
    }

}

export { HelpWindow }